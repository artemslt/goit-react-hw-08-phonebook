{"version":3,"file":"static/js/680.a7e0240f.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","redux/filter/selectors.js","components/Validation.js","components/UpdateContact/UdateContact.jsx","components/ContactsList/ContactsList.jsx","components/AddcontactForm/AddContactForm.jsx","components/FilterInput/FilterInput.jsx","components/Modal/Modal.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from '../contacts/selectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contactsList, filterValue) => {\n    return filterValue\n      ? contactsList.filter(contact =>\n          contact.name.toLowerCase().includes(filterValue)\n        )\n      : contactsList;\n  }\n);\n","import * as Yup from 'yup';\n\nYup.addMethod(Yup.string, 'numeric', function () {\n  return this.matches(\n    /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\\s\\\\./0-9]*$/g,\n    'The field should have digits only'\n  );\n});\n\nconst contactsShema = Yup.object({\n  name: Yup.string().required(),\n  phone: Yup.string().numeric().required(),\n});\n\nexport const shema = () => {\n  return contactsShema;\n};\n","import { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchContacts, updateContact } from '../../redux/contacts/operations';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { shema } from 'components/Validation';\nimport Modal from '@mui/material/Modal';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'secondary.light',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\nexport const UpdateContactForm = ({ onClose, isModalOpen, contact }) => {\n  const dispatch = useDispatch();\n\n  const handelUpdateContact = (values, actions) => {\n    dispatch(\n      updateContact({ id: contact.id, name: values.name, number: values.phone })\n    );\n    actions.setSubmitting(false);\n    actions.resetForm();\n    dispatch(fetchContacts());\n    isModalOpen && onClose();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: contact?.name,\n      phone: contact?.number,\n    },\n\n    onSubmit: handelUpdateContact,\n    validationSchema: shema,\n  });\n  return (\n    <Modal\n      open={isModalOpen}\n      onClose={onClose}\n      aria-labelledby=\"modal\"\n      aria-describedby=\"modal\"\n    >\n      <Box sx={style}>\n        <Box\n          sx={{\n            backgroundColor: 'primary.light',\n            padding: 2,\n            borderRadius: 2,\n            maxWidth: 400,\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Typography component=\"h2\" variant=\"h5\">\n            Update contact\n          </Typography>\n          <form onSubmit={formik.handleSubmit} sx={{ mt: 1 }}>\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"name\"\n              name=\"name\"\n              label=\"Name\"\n              autoComplete=\"name\"\n              value={formik.values.name}\n              onChange={formik.handleChange}\n              error={formik.touched.name && Boolean(formik.errors.name)}\n              helperText={formik.touched.name && formik.errors.name}\n            />\n            <TextField\n              size=\"small\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"phone\"\n              name=\"phone\"\n              label=\"Phone\"\n              type=\"phone\"\n              autoComplete=\"phone\"\n              value={formik.values.phone}\n              onChange={formik.handleChange}\n              error={formik.touched.phone && Boolean(formik.errors.phone)}\n              helperText={formik.touched.phone && formik.errors.phone}\n            />\n            <Button type=\"submit\" variant=\"contained\" sx={{ mt: 2 }}>\n              Update contact\n            </Button>\n          </form>\n        </Box>\n      </Box>\n    </Modal>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/filter/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { Box, Button, List, ListItem, ListItemText } from '@mui/material';\nimport { useState } from 'react';\nimport { UpdateContactForm } from 'components/UpdateContact/UdateContact';\n\nexport const ContactList = () => {\n  const [open, setOpen] = useState(false);\n  const [contact, setContact] = useState(null);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  const handelDeleteContact = e => {\n    dispatch(deleteContact(e.target.id));\n  };\n  const handelUpdateContact = e => {\n    const matchedContact = contacts.find(contact => contact.id === e.target.id);\n    setContact(matchedContact);\n    handleOpen();\n  };\n\n  return (\n    <Box\n      sx={{\n        backgroundColor: 'primary.light',\n        padding: 2,\n        borderRadius: 2,\n      }}\n    >\n      <List sx={{ display: 'grid', gap: 1 }}>\n        {contacts.map(({ id, name, number }) => {\n          return (\n            <ListItem\n              dense={true}\n              key={id}\n              sx={{\n                backgroundColor: 'secondary.light',\n                boxShadow: 2,\n                borderColor: 'primary.dark',\n                borderRadius: 2,\n              }}\n            >\n              <ListItemText>\n                {name} {number}\n              </ListItemText>\n              <Button\n                sx={{\n                  ml: 1,\n                  color: 'secondary.dark',\n                  borderColor: 'secondary.dark',\n                }}\n                variant=\"outlined\"\n                type=\"button\"\n                id={id}\n                onClick={handelUpdateContact}\n              >\n                update\n              </Button>\n              <Button\n                sx={{\n                  ml: 1,\n                  color: 'secondary.dark',\n                  borderColor: 'secondary.dark',\n                }}\n                variant=\"outlined\"\n                type=\"button\"\n                id={id}\n                onClick={handelDeleteContact}\n              >\n                Delete\n              </Button>\n            </ListItem>\n          );\n        })}\n      </List>\n      {open && (\n        <UpdateContactForm\n          onClose={handleClose}\n          isModalOpen={open}\n          contact={contact}\n        />\n      )}\n    </Box>\n  );\n};\n","import { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport Typography from '@mui/material/Typography';\nimport { shema } from 'components/Validation';\n\nexport const ContactForm = ({ onClose, isModalOpen }) => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(selectContacts);\n\n  const addContactsFromForm = (values, actions) => {\n    if (\n      contactsList.find(\n        contact => contact.name.toLowerCase() === values.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts`);\n      actions.setSubmitting(false);\n\n      return;\n    }\n    dispatch(addContact({ name: values.name, number: values.phone }));\n    actions.setSubmitting(false);\n    actions.resetForm();\n    isModalOpen && onClose();\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      phone: '',\n    },\n\n    onSubmit: addContactsFromForm,\n    validationSchema: shema,\n  });\n  return (\n    <Box\n      sx={{\n        backgroundColor: 'primary.light',\n        padding: 2,\n        borderRadius: 2,\n        maxWidth: 400,\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <Typography component=\"h2\" variant=\"h5\">\n        Add new contact\n      </Typography>\n      <form onSubmit={formik.handleSubmit} sx={{ mt: 1 }}>\n        <TextField\n          size=\"small\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"name\"\n          name=\"name\"\n          label=\"Name\"\n          autoComplete=\"name\"\n          value={formik.values.name}\n          onChange={formik.handleChange}\n          error={formik.touched.name && Boolean(formik.errors.name)}\n          helperText={formik.touched.name && formik.errors.name}\n        />\n        <TextField\n          size=\"small\"\n          margin=\"normal\"\n          required\n          fullWidth\n          id=\"phone\"\n          name=\"phone\"\n          label=\"Phone\"\n          type=\"phone\"\n          autoComplete=\"phone\"\n          value={formik.values.phone}\n          onChange={formik.handleChange}\n          error={formik.touched.phone && Boolean(formik.errors.phone)}\n          helperText={formik.touched.phone && formik.errors.phone}\n        />\n        <Button type=\"submit\" variant=\"contained\" sx={{ mt: 2 }}>\n          Add contact\n        </Button>\n      </form>\n    </Box>\n  );\n};\n","import { addFilterValue } from '../../redux/filter/slice';\nimport { useDispatch } from 'react-redux';\nimport { Box, TextField } from '@mui/material';\n\nexport const FilterInput = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(addFilterValue(e.target.value));\n  };\n  return (\n    <Box\n      component=\"form\"\n      noValidate\n      autoComplete=\"off\"\n      name=\"filter\"\n      onChange={handleChange}\n    >\n      <TextField\n        size=\"small\"\n        id=\"filter contacts\"\n        label=\"filter contacts\"\n        variant=\"outlined\"\n      />\n    </Box>\n  );\n};\n","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport { ContactForm } from 'components/AddcontactForm/AddContactForm';\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'secondary.light',\n  border: '2px solid #000',\n  boxShadow: 24,\n  p: 4,\n};\n\nexport const BasicModal = ({ isOpen, onClose }) => {\n  return (\n    <Modal\n      open={isOpen}\n      onClose={onClose}\n      aria-labelledby=\"modal\"\n      aria-describedby=\"modal\"\n    >\n      <Box sx={style}>\n        <ContactForm onClose={onClose} isModalOpen={isOpen} />\n      </Box>\n    </Modal>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from '../components/ContactsList/ContactsList';\nimport { Helmet } from 'react-helmet';\nimport { ContactForm } from 'components/AddcontactForm/AddContactForm';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { FilterInput } from 'components/FilterInput/FilterInput';\nimport { Box, Container, CssBaseline } from '@mui/material';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\nimport IconButton from '@mui/material/IconButton';\nimport PersonAddIcon from '@mui/icons-material/PersonAdd';\nimport { BasicModal } from 'components/Modal/Modal';\n\nexport default function Contacts() {\n  const [open, setOpen] = useState(false);\n  const handleOpen = () => setOpen(true);\n  const handleClose = () => setOpen(false);\n  const dispatch = useDispatch();\n\n  const isLoading = useSelector(selectIsLoading);\n  const isLogIn = useSelector(selectIsLoggedIn);\n\n  useEffect(() => {\n    if (!isLogIn) {\n      return;\n    }\n    dispatch(fetchContacts());\n  }, [dispatch, isLogIn]);\n\n  return (\n    <Container component=\"main\">\n      <CssBaseline />\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      {isLoading && <p> Contacts loading........</p>}\n      {isLogIn && (\n        <Box\n          sx={{\n            display: 'flex',\n            gap: 2,\n          }}\n        >\n          <Box m={1} flexGrow={2}>\n            <Box display=\"flex\" justifyContent=\"space-between\">\n              <FilterInput />\n              <IconButton\n                sx={{ display: { xs: 'flex', md: 'none' } }}\n                size=\"large\"\n                onClick={handleOpen}\n                color=\"inherit\"\n              >\n                <PersonAddIcon />\n              </IconButton>\n            </Box>\n            <ContactList />\n          </Box>\n          <Box sx={{ display: { xs: 'none', md: 'block' }, marginTop: 6 }}>\n            <ContactForm />\n          </Box>\n        </Box>\n      )}\n      <BasicModal isOpen={open} onClose={handleClose} />\n    </Container>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","contactsList","filterValue","contact","name","toLowerCase","includes","Yup","this","matches","contactsShema","required","phone","numeric","shema","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","UpdateContactForm","onClose","isModalOpen","dispatch","useDispatch","formik","useFormik","initialValues","number","onSubmit","values","actions","updateContact","id","setSubmitting","resetForm","fetchContacts","validationSchema","Modal","open","Box","sx","backgroundColor","padding","borderRadius","maxWidth","flexDirection","alignItems","Typography","component","variant","handleSubmit","mt","TextField","size","margin","fullWidth","label","autoComplete","value","onChange","handleChange","error","touched","Boolean","errors","helperText","type","Button","ContactList","useState","setOpen","setContact","useSelector","handelDeleteContact","e","deleteContact","target","handelUpdateContact","matchedContact","find","List","display","gap","map","ListItem","dense","borderColor","ListItemText","ml","color","onClick","ContactForm","alert","addContact","FilterInput","noValidate","addFilterValue","BasicModal","isOpen","Contacts","isLogIn","selectIsLoggedIn","useEffect","Container","CssBaseline","Helmet","m","flexGrow","justifyContent","IconButton","xs","md","PersonAdd","marginTop"],"sourceRoot":""}